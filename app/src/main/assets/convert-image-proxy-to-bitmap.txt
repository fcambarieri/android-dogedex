{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Italic;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0\fs26 \cf0 @SuppressLint("UnsafeOptInUsageError")\
private fun convertImageProxyToBitmap(imageProxy: ImageProxy): Bitmap? \{\
    val image = imageProxy.
\f1\i image 
\f0\i0 ?: return null\
\
    val yBuffer = image.
\f1\i planes
\f0\i0 [0].
\f1\i buffer 
\f0\i0 // Y\
    val uBuffer = image.
\f1\i planes
\f0\i0 [1].
\f1\i buffer 
\f0\i0 // U\
    val vBuffer = image.
\f1\i planes
\f0\i0 [2].
\f1\i buffer 
\f0\i0 // V\
\
    val ySize = yBuffer.remaining()\
    val uSize = uBuffer.remaining()\
    val vSize = vBuffer.remaining()\
\
    val nv21 = ByteArray(ySize + uSize + vSize)\
\
    //U and V are swapped\
    yBuffer.get(nv21, 0, ySize)\
    vBuffer.get(nv21, ySize, vSize)\
    uBuffer.get(nv21, ySize + vSize, uSize)\
\
    val yuvImage = YuvImage(nv21, ImageFormat.
\f1\i NV21
\f0\i0 , image.
\f1\i width
\f0\i0 , image.
\f1\i height
\f0\i0 , null)\
    val out = ByteArrayOutputStream()\
    yuvImage.compressToJpeg(\
        Rect(0, 0, yuvImage.
\f1\i width
\f0\i0 , yuvImage.
\f1\i height
\f0\i0 ), 100,\
        out\
    )\
    val imageBytes = out.toByteArray()\
\
    return BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.size)\
\}\
}